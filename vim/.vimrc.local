" Emacs and bash style insert mode shortcuts
" Delete one character forward; the opposite of <C-h>
inoremap <C-d> <Delete>
cnoremap <C-d> <Delete>
" Delete everything forward; the opposite of <C-u>
" Can't find a way to do this in command mode
inoremap <C-k> <C-o>D
" Move to end of the line; already exists in command mode: c_ctrl-e
inoremap <C-e> <End>
" Move to start of the line; like in vim command mode: c_ctrl-b
" To insert previously inserted text use <C-r>.
inoremap <C-a> <Home>
cnoremap <C-a> <Home>
" Move one character forward; <c-f> is too useful to remap for : / ?
inoremap <C-f> <right>
cnoremap <C-l> <right>
" Move one character backward
inoremap <C-b> <left>
cnoremap <C-b> <left>

" Alt keys specific to MacOS
" <a-d> = Delete word forward; opposite of <c-w>
inoremap <A-d> <C-o>de
cnoremap <A-d> <S-Right><C-w>
" <a-k> = Move up; opposite of <a-j>
inoremap <A-k> <up>
cnoremap <A-k> <up>
" <a-j> = Move down; opposite of <a-k>
inoremap <A-j> <down>
cnoremap <A-j> <down>
" <a-f> = Move one word forward; opposite of <a-b>
inoremap <A-f> <C-o>w
cnoremap <A-f> <S-Right>
" <a-b> = Move one word backward; opposite of <a-f>
inoremap <A-b> <C-o>b
cnoremap <A-b> <S-Left>
" <a-u> = Uppercase to word end; opposite of <a-l>
inoremap <A-u> <C-[>gUeea
" <a-l> = Lowercase to word end; opposite of <a-u>
inoremap <A-l> <C-[>gueea
" <a-t> = Swap current word with previous word
inoremap <A-t> <C-[>diwbPldepa

" Fuzzy finder (FZF)
" https://jesseleite.com/posts/2/its-dangerous-to-vim-alone-take-fzf
nnoremap <silent> <leader>a :Ag<CR>
nnoremap <silent> <leader>B :Bcommits<CR>
nnoremap <silent> <leader>c :Commands<CR>
nnoremap <silent> <leader>C :Commits<CR>
nnoremap <silent> <leader>f :Gfiles<CR>
nnoremap <silent> <leader>F :Files<CR>
nnoremap <silent> <leader>H :Helptags<CR>
nnoremap <silent> <leader>: :History:<CR>
nnoremap <silent> <leader>/ :History/<CR>
nnoremap <silent> <leader>? :History?<CR>
nnoremap <silent> <leader>m :Maps<CR>
nnoremap <silent> <leader>' :Marks<CR>
nnoremap <silent> <leader>l :BLines<CR>
nnoremap <silent> <leader>L :Lines<CR>
" s is for syntax
nnoremap <silent> <leader>r :Rg<CR>
nnoremap <silent> <leader>s :Filetypes<CR>
nnoremap <silent> <Leader>t :BTags<CR>
nnoremap <silent> <Leader>T :Tags<CR>

" https://github.com/junegunn/fzf.vim#usage
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

highlight Normal ctermfg=white ctermbg=black

" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=10

"" Directories for swp files
set nobackup
set noswapfile

" https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI.="\e[5 q" "SI = start INSERT mode
let &t_SR.="\e[4 q" "SR = start REPLACE mode
let &t_EI.="\e[1 q" "EI = end insert mode NORMAL mode (ELSE)

" Share system clipboard ("+) and unnamed ("") registers
" http://vimcasts.org/episodes/accessing-the-system-clipboard-from-vim/
" http://vimcasts.org/blog/2013/11/getting-vim-with-clipboard-support/
set clipboard=unnamed
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif
set go+=a
"Include some of the neovim defaults, others below
set autoindent
set belloff=all
set complete=.,w,b,u,t,i
set display+=lastline
set formatoptions=tcqj
set history=10000
set tabpagemax=50

" (In times of great desperation) allow use of the mouse
set mouse=a

" Don't try to be backwards compatible with vi
set nocompatible

" Copied from https://github.com/mcantor/no_plugins

" FINDING FILES:

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu

" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer
" AUTOCOMPLETE:

" The good stuff is documented in |ins-completion|

" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list

" FILE BROWSING:

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" Copied from https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim
" Really great explanation of many things below: https://dougblack.io/words/a-good-vimrc.html

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
" set magic

" Show matching brackets when text indicator is over them
set showmatch

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Be smart when using tabs ;)
set smarttab

" Linebreak on 500 characters
set lbr
set tw=500

set smartindent "Smart indent
set wrap "Wrap lines

" taken from https://gist.github.com/millermedeiros/1262085
" --- performance / buffer ---
set hidden                  " can put buffer to the background without writing to disk, will remember history/marks.
set ttyfast                 " Send more characters at a given time.

" Show partially typed commands in the statusline
set showcmd

if !exists('##TextYankPost')
  map y <Plug>(highlightedyank)
endif
