// Place your key bindings in this file to override the defaults
[
  { "key": "alt+b", "command": "cursorWordLeft", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+b", "command": "cursorWordStartLeft", "when": "textInputFocus" },
  { "key": "alt+c", "command": "editor.action.transformToTitlecase", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+d", "command": "deleteWordRight", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+d", "command": "deleteWordRight", "when": "textInputFocus && !editorReadonly" },
  { "key": "alt+enter", "command": "editor.action.quickFix", "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
  { "key": "alt+f", "command": "cursorWordEndRight", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+f", "command": "cursorWordEndRight", "when": "textInputFocus" },
  { "key": "alt+l", "command": "editor.action.transformToLowercase", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "alt+space", "command": "editor.action.previewDeclaration", "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
  { "key": "alt+u", "command": "editor.action.transformToUppercase", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "cmd+alt+b", "command": "editor.action.goToImplementation", "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
  { "key": "cmd+alt+i",  "command": "quarto.insertCodeCell", "when": "editorTextFocus && !editorReadonly && editorLangId == 'quarto'" },
  { "key": "cmd+alt+shift+c",  "command": "quarto.goToPreviousCell", "when": "editorTextFocus && editorLangId == 'quarto'"},
  { "key": "Shift+K", "command": "editor.action.showHover", "when": "neovim.mode == normal && editorTextFocus"},
  { "key": "Shift+Tab", "command": "editor.action.showHover", "when": "editorTextFocus"},
  { "key": "cmd+alt+c",  "command": "quarto.goToNextCell", "when": "editorTextFocus && editorLangId == 'quarto'"},
  { "key": "cmd+shift+a",  "command": "quarto.renderAll", "when": "editorTextFocus && editorLangId == 'quarto'"},
  { "key": "cmd+shift+r",  "command": "quarto.render", "when": "editorTextFocus && editorLangId == 'quarto'"},
  { "key": "cmd+alt+l", "command": "editor.action.formatDocument", "when": "editorHasDocumentFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly" },
  { "key": "cmd+alt+l", "command": "editor.action.formatSelection", "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly" },
  { "key": "cmd+alt+l", "command": "quarto.formatCell", "when": "editorTextFocus && !editorHasSelection && editorLangId == 'quarto'" },
  { "key": "cmd+alt+m", "command": "editor.action.codeAction", "when": "editorTextFocus", "args": { "kind": "refactor.extract.function", "apply": "ifSingle" } },
  { "key": "cmd+alt+o", "command": "workbench.action.gotoSymbol" },
  { "key": "cmd+alt+v", "command": "editor.action.codeAction", "when": "editorTextFocus", "args": { "kind": "refactor.extract.constant", "apply": "ifSingle" } },
  { "key": "cmd+alt+y", "command": "workbench.action.sync" },
  { "key": "cmd+alt+z", "command": "git.revertSelectedRanges", "when": "editorHasSelection && editorTextFocus && !editorReadonly" },
  { "key": "cmd+down", "command": "editor.action.goToDeclaration", "when": "editorHasDefinitionProvider && editorTextFocus" },
  { "key": "cmd+enter", "command": "python.datascience.execSelectionInteractive", "when": "editorTextFocus && python.datascience.featureenabled && python.datascience.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
  { "key": "cmd+enter", "command": "python.execSelectionInTerminal", "when": "editorTextFocus && !findInputFocussed && !python.datascience.ownsSelection && !replaceInputFocussed && editorLangId == 'python'" },
  { "key": "cmd+shift+'", "command": "workbench.action.toggleMaximizedPanel" },
  { "key": "cmd+shift+enter", "command": "acceptSelectedSuggestion", "when": "editorFocus && suggestWidgetVisible" },
  { "key": "ctrl+`", "command": "workbench.action.focusActiveEditorGroup", "when": "terminalFocus"},
  { "key": "ctrl+`", "command": "workbench.action.terminal.focus", "when": "!terminalFocus"},
  { "key": "ctrl+6", "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup", "when": "!activeEditorGroupEmpty" },
  { "key": "ctrl+6", "command": "workbench.action.quickOpenNavigateNextInEditorPicker", "when": "inEditorsPicker && inQuickOpen" },
  { "key": "ctrl+a", "command": "cursorLineStart", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "ctrl+alt+b", "command": "cursorWordPartLeft", "when": "textInputFocus" },
  { "key": "ctrl+alt+d", "command": "deleteWordPartRight", "when": "textInputFocus && !editorReadonly" },
  { "key": "ctrl+alt+f", "command": "cursorWordPartRight", "when": "textInputFocus" },
  { "key": "ctrl+alt+h", "command": "deleteWordPartLeft", "when": "textInputFocus && !editorReadonly" },
  { "key": "ctrl+d", "command": "deleteRight", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "ctrl+g", "command": "hideSuggestWidget", "when": "suggestWidgetVisible && textInputFocus" },
  { "key": "ctrl+j", "command": "editor.action.showHover", "when": "editorTextFocus" },
  { "key": "ctrl+shift+alt+b", "command": "cursorWordPartLeftSelect", "when": "textInputFocus" },
  { "key": "ctrl+shift+alt+f", "command": "cursorWordPartRightSelect", "when": "textInputFocus" },
  { "key": "ctrl+space", "command": "editor.action.triggerSuggest", "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly" },
  { "key": "ctrl+t", "command": "editor.action.transposeLetters", "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'" },
  { "key": "ctrl+u", "command": "deleteAllLeft", "when": "textInputFocus" },
  { "key": "ctrl+w", "command": "deleteWordLeft", "when": "textInputFocus && !editorReadonly" }
  { "key": "shift+alt+b", "command": "cursorWordStartLeftSelect", "when": "textInputFocus" },
  { "key": "shift+alt+f", "command": "cursorWordEndRightSelect", "when": "textInputFocus" },
  { "key": "shift+alt+.", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add . && git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+c", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add ${cwd} && git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+d", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add ${fileDirname} && git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+f", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add ${file} && git commit --message \"M ${relativeFile}\" && git push\u000D" } , "when": "terminalIsOpen" },
  { "key": "shift+alt+g", "command": "workbench.action.terminal.sendSequence", "args": { "text": "quarto publish gh-pages --no-prompt --no-browser\u000D" }, "when": "terminalIsOpen"  },
  { "key": "shift+alt+l", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git log --oneline -n 5\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+n", "command": "workbench.action.terminal.sendSequence", "args": { "text": "quarto publish netlify --no-prompt --no-browser\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+p", "command": "workbench.action.terminal.sendSequence", "args": { "text": "quarto preview\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+q", "command": "workbench.action.terminal.sendSequence", "args": { "text": "quarto publish quarto-pub --no-prompt --no-browser\u000D" }, "when": "terminalIsOpen"  },
  { "key": "shift+alt+s", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+t", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add --update && git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+u", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add --all && git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+alt+w", "command": "workbench.action.terminal.sendSequence", "args": { "text": "git add ${workspaceFolder} && git commit --message \"$(git diff --name-status --cached | tr '[:space:]' ' ')\" && git push\u000D" }, "when": "terminalIsOpen" },
  { "key": "shift+escape", "command": "workbench.action.focusActiveEditorGroup", "when": "!editorTextFocus" },
  { "key": "shift+cmd+g", "command": "workbench.view.scm", "when": "workbench.scm.active" },
  { "key": "ctrl+; e", "command": "workbench.files.action.focusOpenEditorsView" },
  { "key": "ctrl+; f", "command": "workbench.explorer.fileView.focus" },
  { "key": "ctrl+; h", "command": "workbench.action.focusSideBar" },
  { "key": "ctrl+; j", "command": "workbench.action.focusPanel" },
  { "key": "ctrl+; g", "command": "workbench.scm.focus" },
  { "key": "ctrl+; k", "command": "workbench.action.focusActiveEditorGroup" },
  { "key": "ctrl+; t", "command": "timeline.focus" },
  { "key": "ctrl+; l", "command": "workbench.action.focusAuxiliaryBar" },
  { "key": "ctrl+; o", "command": "workbench.action.toggleZenMode" },
  { "key": "ctrl+; p", "command": "workbench.action.focusPanel" },
  { "key": "ctrl+; x", "command": "workbench.extensions.action.focusExtensionsView" },
  { "key": "up", "command": "cursorUp", "when": "editorTextFocus && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible" },
  { "key": "down", "command": "cursorDown", "when": "editorTextFocus && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible" },
  { "key": "k", "command": "cursorUp", "when": "editorTextFocus && !inDebugRepl && neovim.mode == 'normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible" },
  { "key": "j", "command": "cursorDown", "when": "editorTextFocus && !inDebugRepl && neovim.mode == 'normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible" },
  { "key": "cmd+;", "command": "workbench.action.toggleAuxiliaryBar" },
  { "key": "cmd+r", "command": "workbench.action.openRecent" },
  { "key": "shift+alt+v", "command": "open-in-vim.open" },
  { "key": "alt+/", "command": "editor.action.accessibleViewAcceptInlineCompletion", "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'" },
  { "key": "alt+f", "command": "editor.action.inlineSuggest.acceptNextWord", "when": "inlineSuggestionVisible && !editorReadonly" },
  { "key": "ctrl+f", "command": "editor.action.inlineSuggest.commit", "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
  { "key": "ctrl+f", "command": "editor.action.inlineSuggest.commit", "when": "inlineSuggestionVisible && tabnine.tab-override && !editorTabMovesFocus" },
  { "key": "ctrl+e", "command": "editor.action.inlineSuggest.commit", "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
  { "key": "ctrl+e", "command": "editor.action.inlineSuggest.commit", "when": "inlineSuggestionVisible && tabnine.tab-override && !editorTabMovesFocus" },
  { "key": "ctrl+g", "command": "editor.action.inlineSuggest.hide", "when": "inlineSuggestionVisible" },
  { "key": "x", "command": "workbench.action.closeActiveEditor", "when": "openEditorsFocus" },
  { "key": "shift+escape", "command": "notebook.cell.quitEdit", "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" }
]
